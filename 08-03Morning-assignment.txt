1.Create Procedure to query the EMP table, retrieving the salary and job title for an employee 
when provided with the employee number.The procedure must return a value from the SAL and JOB
 columns for a specified employee.

create or replace procedure empsal(pempno in emp.empno%type,psal out emp.sal%type,pjob out emp.job%type)
as
	emprec emp%rowtype;
begin
	select * into emprec
	from emp
	where empno=pempno;
	psal:=emprec.sal;
	pjob:=emprec.job;
	dbms_output.put_line(emprec.empno||' '||emprec.sal||' '||emprec.job);
end;

variable salr number
variable jobs varchar2(50);
execute empsal(7902,:salr,:jobs);

print salr;
print jobs;

2.write a function to generate email address for every employee.email address should be name followed
 by . followed by 3 first 3 character of job followed by @mycompany.com
(NOTE:name=SMITH   job ='CLERK' the email ='SMITH.CLE@mycompany.com)


create or replace function generate
(pname varchar2,pjob varchar2)
return varchar2
as
	email varchar2(25);
begin
	email:=pname|| '.' ||substr(pjob,1,3)||'@mycompany.com';
return email;
end;

select ename,job,generate(ename,job) email from emp;



3)write trigger for insert,update and delete on product table
   for every DML operation make entry of old record in historyproduct table
    and when you are updating price of product then make entry in audit_product table
    (productid,product name,old price, new price ,date , user)

create table auditprod(
uname varchar2(20),
pid number,
pname varchar2(10),
oldp number,
newp number,
pdate date
);

create table historyprod
as 
select * 
from product
where 1=2; 

create or replace trigger insertProduct after insert or delete or update on product
FOR EACH ROW
begin
if deleting then
	insert into historyprod values(:old.pid,:old.pname,:old.qty,:old.price,:old.mdate,:old.cid,:old.sid);
elsif inserting then
	insert into historyprod values(:new.pid,:new.pname,:new.qty,:new.price,:new.mdate,:new.cid,:new.sid);
else
	insert into historyprod values(:new.pid,:new.pname,:new.qty,:new.price,:new.mdate,:new.cid,:new.sid);
	if  :new.price!=:old.price then
		insert into auditprod values( USER , :old.pid , :old.pname , :old.price, :new.price , sysdate);
	end if;
end if;
end;

INSERT INTO PRODUCT VALUES
        (27,'Laptop',1,30000,TO_DATE('23-	MAY-2019', 'DD-MON-YYYY'),16,4);

DELETE FROM PRODUCT WHERE PID=25;

update product
set price=45000,
where pid=23;
